@model IEnumerable<PTE_Web.Models.PTEWEB_ItemNameType_ByDaily>

@{
    Layout = "~/Views/Shared/_Layout_bootstrap.cshtml";
}

<h2>@ViewBag.Title</h2>
<!-- 日期選擇物件 Start-->
<div class="row">
    <div class="col-md-12">
        <div class="white-box">
            <form method="post" name="DateRangeForm" action="@ViewContext.RouteData.Values["action"]">
                <div class="input-group">
                    <b style="font-size:30px;"><span style="color:black">Org: </span></b>
                    <input name="org" style="width:120px;font-size:30px;padding-right:30px" type="text" value=@TempData["Org"]>
                    <b style="font-size:30px;padding-right:30px"><span style="color:black">  From </span></b>
                    <input class=flatpickr style="width:200px;font-size:30px;padding-right:30px" type="text" placeholder=@TempData["StartDate"] name="startdate" data-id="rangePlugin">
                    <b style="padding-right:30px;padding-left:30px;font-size:30px"><span style="color:black">  to   </span></b>
                    <input type="text" align="middle" style="padding-right:30px;width:200px;font-size:30px" placeholder=@TempData["EndDate"] id="secondRangeInput" name="enddate">
                    <input type='submit' class="btn waves-effect waves-light btn-primary" style="font-size:30px;margin-top:-20px;margin-left:15px;text-align:center;" value='Go' />
                </div>
            </form>
        </div>
    </div>
</div>
<!-- 日期選擇物件 End-->
<p>@ViewBag.DateRange</p>
<div class="row">
    <div class="col-md-4">
        <div class="white-box">
            <div id="chartdiv" style="min-width:400px;height:600px"></div>
            <script>
    var chart = am4core.create("chartdiv", am4charts.XYChart);
    var valueAxisX = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxisX.renderer.ticks.template.disabled = true;
    valueAxisX.renderer.axisFills.template.disabled = true;
    var valueAxisY = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxisY.renderer.ticks.template.disabled = true;
    valueAxisY.renderer.axisFills.template.disabled = true;
    valueAxisX.title.text = "Spare (s)";
    valueAxisY.title.text = "FYR (%)";

    var series = chart.series.push(new am4charts.LineSeries());
    series.dataFields.valueX = "avg_pass_time";
    series.dataFields.valueY = "fyr";
    series.dataFields.value = "total";
    series.dataFields.color = "color"
    series.strokeOpacity = 0;
    series.sequencedInterpolation = true;
    series.tooltip.pointerOrientation = "vertical";
    series.name = "Org";

    var bullet = series.bullets.push(new am4charts.CircleBullet());
    bullet.propertyFields.fill = "color";
    bullet.strokeOpacity = 0;
    bullet.strokeWidth = 2;
    bullet.fillOpacity = 0.5;
    bullet.stroke = am4core.color("#ffffff");
    bullet.hiddenState.properties.opacity = 0;
    bullet.circle.tooltipText = "[bold]{description}:[/]\nTotalTestCount: {value.value}\nAverage Pass Spare: {valueX.value}\nFYR:{valueY.value}";

    var hoverState = bullet.states.create("hover");

    hoverState.properties.fillOpacity = 1;

    hoverState.properties.strokeOpacity = 1;

    series.heatRules.push({ target: bullet.circle, min: 2, max: 60, property: "radius" });

    bullet.circle.adapter.add("tooltipY", function (tooltipY, target) {

        return -target.radius;

    })
    chart.cursor = new am4charts.XYCursor();

    chart.cursor.behavior = "zoomXY";

    chart.scrollbarX = new am4core.Scrollbar();

    chart.scrollbarY = new am4core.Scrollbar();

    chart.legend = new am4charts.Legend();

    chart.data = @(new HtmlString(ViewBag.JsonScatter));
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div class="white-box">
            <div id="container_2" style="min-width:400px;height:600px"></div>
            <script type="text/javascript">
    AmCharts.makeChart("container_2",
        {
            "type": "serial",
            "categoryField": "description",
            "rotate": true,
            "startDuration": 1,
            "theme": "default",
            "categoryAxis": {
                "gridPosition": "start",
                "autoGridCount": false,
                "gridCount": 20
            },
            "trendLines": [],
            "graphs": [
                {
                    "fillAlphas": 1,
                    "id": "AmGraph-1",
                    "title": "fyr",
                    "type": "column",
                    "valueField": "fyr",
                    "balloonText": "[[category]]:\n <b>[[value]]%</b>"

                }
            ],
            "guides": [
                {
                    "above": true,
                    "boldLabel": true,
                    "color": "#FF0000",
                    "dashLength": 5,
                    "fillAlpha": 0,
                    "fontSize": 13,
                    "id": "Guide-1",
                    "inside": true,
                    "label": "Focus Gap",
                    "labelRotation": -90,
                    "lineAlpha": 1,
                    "lineColor": "#ff0000",
                    "toAngle": 0,
                    "value": 90
                }
            ],
            "valueAxes": [
                {
                    "id": "fyr ",
                    "title": "FYR (%)"
                }
            ],
            "allLabels": [],
            "balloon": {},
            "titles": [
                {
                    "id": "FT",
                    "size": 15,
                    "tabIndex": 1,
                    "text": "ATE FYR (QTY > 500)"
                }
            ],
            "dataProvider": @(new HtmlString(ViewBag.ATEJsonList))                                }
          );
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div class="white-box">
            <div id="container_1" style="min-width:400px;height:600px"></div>
            <script type="text/javascript">
        AmCharts.makeChart("container_1",
        {
            "type": "serial",
            "categoryField": "description",
            "rotate": true,
            "startDuration": 1,
            "theme": "default",
            "categoryAxis": {
                "gridPosition": "start",
                "autoGridCount": false,
                "gridCount": 20
            },
            "trendLines": [],
            "graphs": [
                {
                    "fillAlphas": 1,
                    "id": "AmGraph-1",
                    "title": "fyr",
                    "type": "column",
                    "valueField": "fyr",
                    "balloonText": "[[category]]:\n <b>[[value]]%</b>"
                }
            ],
            "guides": [
                {
                    "above": true,
                    "boldLabel": true,
                    "color": "#FF0000",
                    "dashLength": 5,
                    "fillAlpha": 0,
                    "fontSize": 13,
                    "id": "Guide-1",
                    "inside": true,
                    "label": "Focus Gap",
                    "labelRotation": -90,
                    "lineAlpha": 1,
                    "lineColor": "#ff0000",
                    "toAngle": 0,
                    "value": 90
                }
            ],
            "valueAxes": [
                {
                    "id": "fyr ",
                    "title": "FYR (%)"
                }
            ],
            "allLabels": [],
            "balloon": {},
            "titles": [
                {
                    "id": "FT",
                    "size": 15,
                    "tabIndex": 1,
                    "text": "FT FYR (QTY > 500)"
                }
            ],
            "dataProvider":  @(new HtmlString(ViewBag.FTJsonList))                                                   }
               );
               // chart.addListener("clickGraphItem", handleClick);
                function handleClick(event) {
                    alert(event.item.category + ": " + event.item.values.value);
                }
            </script>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs">
            <li class="nav-item active">
                <a class="nav-link fade in active" data-toggle="tab" href="#tab_containers" style="font-size:25px;font-weight:bold;font-style:italic" role="tab">ITMXP</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="profile-tab" data-toggle="tab" href="#nonITMXP_tab_container" style="font-size:25px;font-weight:bold;font-style:italic" role="tab">Non ITMXP</a>
            </li>
        </ul>
        <div class="white-box" style="text-align:center;">
            <div class="tab-content" id="myTabContents">
                <div class="tab-pane active" id="tab_containers" role="tabpanel">
                    <div class="table-responsive">
                        <div id="containers"></div>
                    </div>
                </div>
                <div class="tab-pane fade" id="nonITMXP_tab_container" role="tabpanel">
                    <div class="table-responsive">
                        <div id="nonITMXP_container"></div>
                    </div>
                </div>
                <div id="myModal" class="modal fade" role="dialog">
                    <div class="modal-dialog modal-lg">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Non-ITM Chart</h4>
                            </div>
                            <div class="modal-body">
                                <div id="DailyUsage"><canvas id="Canvs" height="300vw" width="1000vw"></canvas></div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script data-config>
                    var model = @Html.Raw(Json.Encode(Model));
                    $('#containers').FancyGrid({
                        title: 'Top Focus',
                        renderTo: 'container',
                        height: 'fit',
                        width: 'fit',
                        data: model,
                        theme: 'gray',
                        resizable: true,
                        defaults: {
                            type: 'string',
                            width: 120,
                            sortable: true,
                            ellipsis: true,
                            resizable: true,
                            filter: {
                                header: true,
                                emptyText: 'Search'
                            }
                        },
                        paging: {
                            pageSize: 10,
                            pageSizeData: [5, 10, 20, 50, 500, 1000]
                        },
                        exporter: true,
                        tbar: [{
                            text: 'Export to Excel',
                            handler: function () {
                                var thispageSize = this.getPageSize();
                                this.setPageSize(this.getTotal());
                                this.exportToExcel({
                                    fileName: 'All_FYRTable_Excel',
                                    header: true
                                });
                                this.setPageSize(thispageSize);
                            }
                        }, {
                            text: 'Export to CSV',
                            handler: function () {
                                var thispageSize = this.getPageSize();
                                this.setPageSize(this.getTotal());
                                this.exportToCSV({
                                    fileName: 'All_FYRTable_CSV.csv',
                                    header: true
                                });
                                this.setPageSize(thispageSize);
                            }
                        }],
                        columns: [{
                            index: 'ItemNameType',
                            locked: true,
                            title: 'ItemNameType',
                            width: 120,
                            type: 'number'

                        }, {
                            index: 'Org',
                            title: 'Org',
                            type: 'combo',
                            width: 80,
                            itemCheckBox: true,
                            multiSelect: true,
                            data: ['T1', 'T2', 'T3','T5']

                        }, {
                            index: 'TestStation',
                            title: 'TestStation',
                            type: 'combo',
                            itemCheckBox: true,
                            multiSelect: true,
                                data: ['ATE', 'BT', 'FT', 'Sound', 'CTHT', 'Engineer', 'Pairing', 'IQC', 'QALab', 'NOH', 'VT', 'RTESN', 'SNRCalibration', 'UK_RL', 'US_RL', 'CleanRoom', 'Outsources', 'Baro', 'uTube', 'G-Sensor', 'E-Compass', 'Airtight', 'Sensor', 'PackIntegrated']
                            }, {
                                index: 'StationType',
                                title: 'StationType',
                                type: 'combo',
                                itemCheckBox: true,
                                multiSelect: true,
                                data: ['AOEM', 'Camera', 'Hand_Held', 'In_the_Air', 'On_The_Trail', 'On_the_Water', 'Onto_Fitness', 'Others', 'PND']
                            }, {
                            index: 'TestType',
                            title: 'TestType',
                            width: 80

                        }, {
                            index: 'TestType2',
                            title: 'TestType2'

                        }, {
                            index: 'Description',
                            title: 'Description',
                            width: 200

                        }, {
                            index: 'FYR',
                            title: 'FYR',
                            type: 'number'
                        }, {
                            index: 'Avg_Pass_Time',
                            title: 'Avg_Pass_Time',
                            type: 'number'
                        }, {
                            index: 'Pass',
                            title: 'Pass',
                            type: 'number'
                        }, {
                            index: 'Fail',
                            title: 'Fail',
                            type: 'number'
                        }, {
                            index: 'Total',
                            title: 'Total',
                            type: 'number'
                        }, {
                            index: 'D_Pass',
                            title: 'D_Pass',
                            type: 'number'
                        }, {
                            index: 'D_Fail',
                            title: 'D_Fail',
                            type: 'number'
                        }, {
                            index: 'D_Total',
                            title: 'D_Total',
                            type: 'number'
                        },
                        {
                            title: 'Details',
                            type: 'action',
                            width: 60,
                            items: [{
                                text: 'Details',
                                cls: 'btn btn-success',
                                handler: function (grid, o) {
                                    window.open("@Url.Action("AnalyzeItemNameType", "AnalyzeTool")" + "?itemnametype=" + o.value.ItemNameType + "&org=" + o.value.Org+"&startdate=@TempData["StartDate"]&enddate=@TempData["EndDate"]", '_blank');
                                }
                            }]
                        },
                        {
                            title: 'Spare',
                            type: 'action',
                            width: 60,
                            items: [{
                                text: 'Spare',
                                cls: 'btn btn-info',
                                handler: function (grid, o) {
                                    window.open("@Url.Action("Index", "SpareTool")" + "?itemnametype=" + o.value.ItemNameType + "&org=" + o.value.Org+"&startdate=@TempData["StartDate"]&enddate=@TempData["EndDate"]", '_blank');
                                }
                            }]
                        }
                        ]
                    });
    </script>
    <script>
        var NonITMmodel = @Html.Raw(Json.Encode( ViewBag.nonITMData));

        $('#nonITMXP_container').FancyGrid({
            title: 'Top Focus',
            renderTo: 'container_nonITM',
            height: 'fit',
            width: 'fit',
            data: NonITMmodel,
            theme: 'gray',
            resizable: true,
            defaults: {
                type: 'string',
                width: 120,
                sortable: true,
                ellipsis: true,
                resizable: true,
                filter: {
                    header: true,
                    emptyText: 'Search'
                }
            },
            paging: {
                pageSize: 10,
                pageSizeData: [5, 10, 20, 50, 500, 1000]
            },
            exporter: true,
            tbar: [{
                text: 'Export to Excel',
                handler: function () {
                    var thispageSize = this.getPageSize();
                    this.setPageSize(this.getTotal());
                    this.exportToExcel({
                        fileName: 'All_FYRTable_Excel',
                        header: true
                    });
                    this.setPageSize(thispageSize);
                }
            }, {
                text: 'Export to CSV',
                handler: function () {
                    var thispageSize = this.getPageSize();
                    this.setPageSize(this.getTotal());
                    this.exportToCSV({
                        fileName: 'All_FYRTable_CSV.csv',
                        header: true
                    });
                    this.setPageSize(thispageSize);
                }
            }],
            columns: [{
                index: 'ItemNameType',
                locked: true,
                title: 'ItemNameType',
                width: 120
            }, {
                index: 'Org',
                title: 'Org',
                type: 'combo',
                width: 80,
                itemCheckBox: true,
                multiSelect: true,
                data: ['T1', 'T2', 'T3','T5']
            }, {
                index: 'TestStation',
                    title: 'TestStation',
                    type: 'combo',
                    width: 100,
                    itemCheckBox: true,
                    multiSelect: true,
                    data: ['Airtight', 'Baro', 'G-Sensor', 'E-Compass']

                }, {
                index: 'TestType',
                title: 'TestType',
                width: 80
            }, {
                index: 'TestType2',
                title: 'TestType2'

            }, {
                index: 'Description',
                title: 'Description',
                width: 200

            }, {
                index: 'FYR',
                title: 'FYR'
            }, {
                index: 'Avg_Pass_Time',
                title: 'Avg_Pass_Time'
            }, {
                index: 'Pass',
                title: 'Pass'
            }, {
                index: 'Fail',
                title: 'Fail'
            }, {
                index: 'Total',
                title: 'Total'
            }, {
                index: 'D_Pass',
                title: 'D_Pass'
            }, {
                index: 'D_Fail',
                title: 'D_Fail'
            }, {
                index: 'D_Total',
                title: 'D_Total'
            }, {
                title: 'Detail',
                type:'text',
                width: 60,
                render: function(o) {
                o.value = '<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal"  onclick="GetNonITMFYRTrend(\''+o.value.Org+'\',\''+o.value.Description+'\')">Trend</button>';
               return o;
               }
               }]
           });
        function GetNonITMFYRTrend(org, description) {
            var st =@Html.Raw(Json.Encode(TempData["StartDate"]));
            var et =@Html.Raw(Json.Encode(TempData["EndDate"]));
            var dataString = 'st=' + encodeURIComponent(st) + "&et=" + encodeURIComponent(et) + "&org=" + org + "&des=" + encodeURIComponent(description);
            $.ajax({
                url: "SearchNonITMFYR",
                data: dataString,
                type: "POST",
                success: function (data) {
                    //init chart 為了防止chart 重疊
                    $('#Canvs').replaceWith('<canvas id = "Canvs" height = "300vw" width = "1000vw"></canvas>');
                    var totalData = [];
                    var FYR = [];
                    var date = [];
                    var uph = []
                    var uphMax = 0;
                    for (var i = 0; i < data.length; i++){
                        totalData.push(data[i].Total);
                        FYR.push(data[i].FYR);
                        date.push(data[i].Date);
                        uph.push(data[i].UPH_Achievement);
                        if (data[i].UPH_Achievement > 100) {
                            uphMax = uphMax > data[i].UPH_Achievement ? uphMax : data[i].UPH_Achievement
                        }
                    }
                    var color = Chart.helpers.color;
                     var lineChartData = {
                            labels: date,
                            datasets: [{
                                label: "Total",
                               type:"bar",
                                backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),
			                	borderColor: window.chartColors.red,
                                fill: false,
                                data: totalData,
                                yAxisID: "y-axis-1",
                            }, {
                                label: "FYR",
                                borderColor: window.chartColors.blue,
                                backgroundColor: window.chartColors.blue,
                                fill: false,
                                data:FYR,
                                yAxisID: "y-axis-2"
                                },
                                {
                                    label: "UPH",
                                    borderColor: window.chartColors.orange,
                                    backgroundColor: window.chartColors.orange,
                                    fill: false,
                                    data: uph,
                                    yAxisID: "y-axis-2"
                                }
                            ]
                    };
                    var ctx = document.getElementById("Canvs").getContext("2d");
                    var options= {
                        responsive: true,
                        hoverMode: 'index',
                        stacked: false,
                        title: {
                            display: true,
                            text: description
                        },
                        scales: {
                            yAxes: [{
                                type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                                display: true,
                                position: "left",
                                id: "y-axis-1",
                            }, {
                                type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                                display: true,
                                position: "right",
                                id: "y-axis-2",
                                gridLines: {
                                    drawOnChartArea: false, // only want the grid lines for one axis to show up
                                }, ticks: {
                                    max: uphMax > 100 ? uphMax:100,
                                    min: 0,
                                    stepSize: 10
                                }
                            }],
                        }
                    }
                    var nonITMXPChart = new Chart(ctx, { type: 'line', data: lineChartData, options: options });
                }
            });
        }
    </script>
</div>