@model IEnumerable<PTE_Web.Models.PTEProductOwner>

@{
    ViewBag.Title = "ProductOwnerEditor";
    Layout = "~/Views/Shared/_Layout_bootstrap.cshtml";
}

<style>
    input.largerCheckbox {
        transform: scale(3);
    }

    body {
        text-align: left;
    }
</style>

<div class="row">
    <div class="col-md-12">
        <div class="white-box" style="height:720px;width:100%">
            <h2> <b>ProductOwnerEditor </b></h2>

            <div class="table-responsive" style="height:580px">
                <table id="example" class="display table" style="font-size:20px;width:100%">
                    <thead>
                        <tr style="text-align: right;">
                            <th><input type="checkbox" style="margin-left:30px" class="largerCheckbox" name="CheckAll" value="核取方塊" id="CheckAll" /></th>
                            <th>Type</th>
                            <th>@Html.DisplayNameFor(model => model.Org)</th>
                            <th>@Html.DisplayNameFor(model => model.ItemNameType)</th>
                            <th>@Html.DisplayNameFor(model => model.Description)</th>
                            <th>@Html.DisplayNameFor(model => model.Owner)</th>
                            <th>@Html.DisplayNameFor(model => model.Priority)</th>
                            @*<th>@Html.DisplayNameFor(model => model.ProductionDays)</th>*@
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int i = 0;

                        }
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td><input type="checkbox" style="margin-left:30px" name="checkboxs" class="largerCheckbox" value="@Html.DisplayFor(modelItem => item.Org)#@Html.DisplayFor(modelItem => item.ItemNameType)#@Html.DisplayFor(modelItem => item.Description)" id="CheckboxGroup1_@i" /></td>
                                @if (item.ItemNameType > 50000)
                                {
                                    <td>Athena2009</td>
                                }
                                else
                                {
                                    <td>ITMXP</td>
                                }
                                <td>@Html.DisplayFor(modelItem => item.Org)</td>
                                <td>@Html.DisplayFor(modelItem => item.ItemNameType)</td>
                                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                                <td>@Html.DisplayFor(modelItem => item.Owner)</td>
                                <td><button class="btn btn-@item.Priority round" data-toggle="popover" title="@item.PriorityString Priority" data-placement="top" data-content="@Html.Raw(@item.TipString)">@Html.DisplayFor(modelItem => item.PriorityString)</button></td>
                                @*<td>@Html.DisplayFor(modelItem => item.ProductionDays)</td>*@
                            </tr>
                            i++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="white-box">
            <button type="button" class="btn btn-warning btn-block" style="font-size:36px" onclick="show()">Owner Editor</button>
        </div>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        function ActionReply() {
            obj = document.getElementsByName("checkboxs");
            check_value = [];
            for (i in obj) {
                if (obj[i].checked)
                    check_value.push(obj[i].value);
            }
        $.ajax({
            type: 'POST',
            contentType: 'application/json',
            data: check_value,
            success: function (data) {
                $('#IssuesReply').modal('show');

            }
        });
    }
        function show() {
            obj = document.getElementsByName("checkboxs");
            check_value = [];
            for (i in obj) {
                if (obj[i].checked)
                    check_value.push(obj[i].value);
            }
            var result = prompt("已選擇" + check_value.length + "個測試站，請輸入PTE負責人工號 (Ex:16414)","");
            if (result) {
                console.log("點了確定 獲取輸入的結果=" + result);
                $.ajax({
                    url: "@Url.Action("ProductOwnerEditor","DashBoard")",
                    method: "post",
                    contentType: 'application/json',
                    data: JSON.stringify({ owner: result, input: check_value })
                });
                window.location.reload();
            } else if (result === "") {
                alert("請輸入工號");
            } else {
                console.log("點了取消");
            }
        }
    </script>
}

<script>
    $(document).ready(function () {

    })
</script>

<script data-config>

    var id = function (id) {
        return document.getElementById(id);
    };
    var table = id('example');
    var totRowIndex = table.getElementsByTagName('tr').length;
    var tfConfig = {
        // instruct TableFilter location to import ressources from
        base_path: '~/Content/TableFilter/',
        paging: {
            results_per_page: ['Records: ', [10, 25, 50, 100]]
        },
        col_0: 'none',
        col_1: 'select',
        col_2: 'select',
        alternate_rows: true,
        rows_counter: true,
        btn_reset: true,
        loader: true,
        status_bar: true,
        sort: true,
        sort_config: {
            sort_types: ['String', 'String', 'String', 'String', 'String', 'String', 'String', 'String']
        },
        mark_active_columns: true,
        highlight_keywords: true,
        //no_results_message: true,
        col_types: [
            'string', 'string', 'string', 'string', 'string', 'string', 'string'
        ],
        col_widths: [
            '150px', '200px', '100px', '200px', '500px', '200px', '200px'
        ],
        extensions: [{ name: 'sort' }]
    };

    var tf = new TableFilter('example', tfConfig);
    tf.emitter.on(['initialized'], initSelectionListeners);
    tf.init();

    //while (!tf.initialized) {

    //}
    // Store selected rows indexes
    var selectedRows = [];

    var selectedCss = 'selected';

    // Initialize checkboxes listeners
    function initSelectionListeners(tf) {
        var headerCheckbox = tf.getHeaderElement(0).querySelector('input');
        var checkboxes = getBodyCheckboxes(tf.dom());

        // Add event listener to checkbox in table head
        headerCheckbox.addEventListener('change', toggleAll.bind(tf));

        // Add event listener to all checkboxes in table body
        [].forEach.call(checkboxes, function (checkbox) {
            checkbox.addEventListener('change', changeHandler);
        });
    }

    // Toggle all checkboxes in valid rows
    function toggleAll(evt) {
        var tf = this;
        var headerCheckbox = evt.target;
        var isChecked = headerCheckbox.checked;
        var checkboxes = getBodyCheckboxes(tf.dom());
        var filteredRows = tf.getValidRows();

        [].forEach.call(checkboxes, function (checkbox) {
            var row = getRowElement(checkbox);
            var rowIndex = row.rowIndex;
            if (isChecked) {
                if (filteredRows.indexOf(rowIndex) !== -1) {
                    checkbox.checked = true;
                    selectRow(selectedRows, row, selectedCss);
                }
            } else {
                checkbox.checked = false;
                deselectRow(selectedRows, row, selectedCss)
            }
        });
    }

    // Checkbox change event handler
    function changeHandler(evt) {
        var checkbox = evt.target;
        var row = getRowElement(checkbox);
        var isChecked = checkbox.checked;

        if (isChecked) {
            selectRow(selectedRows, row, selectedCss);
        } else {
            deselectRow(selectedRows, row, selectedCss);
        }
    }

    // Select row
    function selectRow(selectedRows, row, cssClass) {
        row.classList.add(cssClass);
        storeRowIndex(selectedRows, row.rowIndex);
    }

    // Deselect row
    function deselectRow(selectedRows, row, cssClass) {
        row.classList.remove(cssClass);
        removeRowIndex(selectedRows, row.rowIndex);
    }

    // Store selected row index
    function storeRowIndex(selectedRows, rowIndex) {
        if (selectedRows.indexOf(rowIndex) === -1) {
            selectedRows.push(rowIndex);
        }
    }

    // Remove row index previously selected
    function removeRowIndex(selectedRows, rowIndex) {
        selectedRows.splice(selectedRows.indexOf(rowIndex), 1);
    }

    // Get all checkboxes in table body
    function getBodyCheckboxes(table) {
        var tBody = table.tBodies[0];
        return tBody.getElementsByTagName('input');
    }

    // Get the parent row element
    function getRowElement(element) {
        while (element !== null) {
            if (element.nodeName === 'TR') {
                return element;
            }
            element = element.parentNode;
        }
        return null;
    }
</script>