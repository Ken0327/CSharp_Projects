@using PTE_Web.Models;
@model PTE_Web.Models.SparePageModels
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout_bootstrap.cshtml";
}
<h2>【  @ViewBag.TitleDescription 】 Item Spare Tool</h2>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<style>

    .modal-lg {
        min-width: 80% !important;
    }

    .modal-lg1 {
        min-width: 30% !important;
    }

    .tree, .tree ul {
        margin: 0;
        padding: 0;
        list-style: none
    }

        .tree ul {
            margin-left: 1em;
            position: relative
        }

            .tree ul ul {
                margin-left: .5em
            }

            .tree ul:before {
                content: "";
                display: block;
                width: 0;
                position: absolute;
                top: 0;
                bottom: 0;
                left: 0;
                border-left: 1px solid
            }

        .tree li {
            margin: 0;
            padding: 0 1em;
            line-height: 2em;
            color: #369;
            font-weight: 700;
            position: relative
        }

        .tree ul li:before {
            content: "";
            display: block;
            width: 10px;
            height: 0;
            border-top: 1px solid;
            margin-top: -1px;
            position: absolute;
            top: 1em;
            left: 0
        }

        .tree ul li:last-child:before {
            background: #fff;
            height: auto;
            top: 1em;
            bottom: 0
        }

    .indicator {
        margin-right: 5px;
    }

    .tree li a {
        text-decoration: none;
        color: #369;
    }

    .tree li button, .tree li button:active, .tree li button:focus {
        text-decoration: none;
        color: #369;
        border: none;
        background: transparent;
        margin: 0px 0px 0px 0px;
        padding: 0px 0px 0px 0px;
        outline: 0;
    }
</style>
<script>
    $.fn.extend({
        treed: function (o) {

            var openedClass = 'glyphicon-minus-sign';
            var closedClass = 'glyphicon-plus-sign';

            if (typeof o != 'undefined') {
                if (typeof o.openedClass != 'undefined') {
                    openedClass = o.openedClass;
                }
                if (typeof o.closedClass != 'undefined') {
                    closedClass = o.closedClass;
                }
            };

            //initialize each of the top levels
            var tree = $(this);
            tree.addClass("tree");
            tree.find('li').has("ul").each(function () {
                var branch = $(this); //li with children ul
                branch.prepend("<i class='indicator glyphicon " + openedClass + "'></i>");
                branch.addClass('branch');
                branch.on('click', function (e) {
                    if (this == e.target) {
                        var icon = $(this).children('i:first');
                        icon.toggleClass(openedClass + " " + closedClass);
                        $(this).children().children().toggle();
                    }
                })
                // branch.children().children().toggle();
            });
            //fire event from the dynamically added icon
            tree.find('.branch .indicator').each(function () {
                $(this).on('click', function () {
                    $(this).closest('li').click();
                });
            });
            //fire event to open branch if the li contains an anchor instead of text
            tree.find('.branch>a').each(function () {
                $(this).on('click', function (e) {
                    $(this).closest('li').click();
                    e.preventDefault();
                });
            });
            //fire event to open branch if the li contains a button instead of text
            tree.find('.branch>button').each(function () {
                $(this).on('click', function (e) {
                    $(this).closest('li').click();
                    e.preventDefault();
                });
            });
        }
    });
</script>
<!-- 日期選擇物件 Start-->
<div class="row">
    <div class="col-md-12">
        <div class="white-box">
            <form method="post" name="DateRangeForm" action="@ViewContext.RouteData.Values["action"]">
                <div class="input-group">
                    <b style=" font-size: 30px;"><span style="        color: black">Org: </span></b>
                    <input name="org" style="        width: 120px;  font-size: 30px; padding-right: 30px" type="text" value=@TempData["Org"] />
                    <b style="        font-size: 30px;"><span style="        color: black">ItemNameType: </span></b>
                    <input name="itemnametype" style="        width: 120px; font-size: 30px;padding-right: 30px" type="text" value=@TempData["ItemNameType"] />
                    <b style="        font-size: 30px;  padding-right: 30px"><span style="        color: black">  From </span></b>
                    <input class=flatpickr style="        width: 200px; font-size: 30px;  padding-right: 30px" type="text" placeholder=@TempData["StartDate"] name="startdate" data-id="rangePlugin" />
                    <b style="padding-right: 30px; padding-left: 30px; font-size: 30px"><span style="color: black">  to   </span></b>
                    <input type="text" align="middle" style="padding-right: 30px;  width: 200px; font-size: 30px" placeholder=@TempData["EndDate"] id="secondRangeInput" name="enddate" />
                    <input type='submit' class="btn waves-effect waves-light btn-primary" style="        font-size: 30px; margin-top: -20px;  margin-left: 15px; text-align: center;" value='Go' />
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="showCommands" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg1">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">ITMXP Commands</h4>
            </div>
            <div class="modal-body">
                <div id="cmdTree"></div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="white-box">
            <div id="Top10_Spare" class="col" style="        min-width: 300px;
        height: 300px;"></div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="white-box">
            <div id="Top10_Retry" class="col" style="        min-width: 300px;
        height: 300px;"></div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="white-box">
            <div id="SpareDaily" class="col" style="min-width: 300px; height: 500px;"></div>
        </div>
    </div>
    @*<div class="col-md-6">
            <div class="white-box">
                <div id="SpareGPN" class="col" style="min-width: 300px;  height: 400px;"></div>
            </div>
        </div>*@
</div>

<script type="text/javascript">
                                                             am4core.useTheme(am4themes_frozen);
                                                            var chart = am4core.create("SpareDaily", am4charts.XYChart);
                                                            chart.data = @(new HtmlString(ViewBag.SpareDaily));
                                                            var title = chart.titles.create();
                                                            title.text = "Daily Spare";
                                                            title.fontSize = 16;
                                                            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
                                                            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                                                            categoryAxis.dataFields.category = "DateTime";
                                                            categoryAxis.renderer.grid.template.location = 0;
                                                            categoryAxis.renderer.minGridDistance = 30;
                                                             categoryAxis.renderer.labels.template.rotation = 290;
                                                            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                                                            valueAxis.min = 0;
                                                            // Create series
                                                            var series = chart.series.push(new am4charts.ColumnSeries());
                                                            series.dataFields.valueY = "Spare";
                                                            series.dataFields.categoryX = "DateTime";
                                                            // Populate data
                                                            for (var i = 0; i < (chart.data.length - 1); i++) {
                                                              chart.data[i].valueNext = chart.data[i + 1].Spare;
                                                            }
                                                            // Add series for showing variance arrows
                                                            var series2 = chart.series.push(new am4charts.ColumnSeries());
                                                            series2.dataFields.valueY = "valueNext";
                                                            series2.dataFields.openValueY = "Spare";
                                                            series2.dataFields.categoryX = "DateTime";
                                                            series2.columns.template.width = 1;
                                                            series2.fill = am4core.color("#555");
                                                            series2.stroke = am4core.color("#555");
                                                                // Add a triangle for arrow tip
                                                            var arrow = series2.bullets.push(new am4core.Triangle);
                                                            arrow.width = 10;
                                                            arrow.height = 10;
                                                            arrow.horizontalCenter = "middle";
                                                            arrow.verticalCenter = "top";
                                                            arrow.dy = -1;
                                                            arrow.adapter.add("rotation", function(rotation, target) {
                                                              return getVariancePercent(target.dataItem) < 0 ? 180 : rotation;
                                                            });
                                                            arrow.adapter.add("dy", function(dy, target) {
                                                              return getVariancePercent(target.dataItem) < 0 ? 1 : dy;
                                                            });
                                                            // Add a label
                                                            var label = series2.bullets.push(new am4core.Label);
                                                            label.padding(10, 10, 10, 10);
                                                            label.text = "";
                                                            label.fill = am4core.color("#c00");
                                                            label.strokeWidth = 0;
                                                            label.horizontalCenter = "middle";
                                                            label.verticalCenter = "bottom";
                                                            label.fontWeight = "bolder";

                                                            label.adapter.add("textOutput", function(text, target) {
                                                              var percent = getVariancePercent(target.dataItem);
                                                              return percent ? percent + "%" : text;
                                                            });

                                                            label.adapter.add("verticalCenter", function(center, target) {
                                                              return getVariancePercent(target.dataItem) < 0 ? "top" : center;
                                                            });

                                                            label.adapter.add("fill", function(fill, target) {
                                                              return getVariancePercent(target.dataItem) < 0 ? am4core.color("#0c0") : fill;
                                                            });
                                                            series.columns.template.tooltipText = "Spare: [bold]{valueY}[/]";
                                                                series.columns.template.fillOpacity = .8;
                                                                var columnTemplate = series.columns.template;
                                                                columnTemplate.strokeWidth = 2;
                                                                columnTemplate.strokeOpacity = 1;
                                                            chart.scrollbarX = new am4core.Scrollbar();
                                                            chart.scrollbarY = new am4core.Scrollbar();
                                                            function getVariancePercent(dataItem) {
                                                              if (dataItem) {
                                                                var value = dataItem.valueY;
                                                                var openValue = dataItem.openValueY;
                                                                var change = value - openValue;
                                                                return Math.round(change / openValue * 100);
                                                              }
                                                              return 0;
                                                            }

    var xData = [];
    var yData = [];
    var GPNSpareData =@(new HtmlString(ViewBag.SpareDailyGpn));
    for (var i = 0; i < GPNSpareData.length; i++) {
        xData.push(GPNSpareData[i].GPN)
        yData.push(GPNSpareData[i].Spare)

    }

var data = [];

                                            AmCharts.makeChart("Top10_Spare",
                                                {
                                                    "type": "serial",
                                                    "categoryField": "Item",
                                                    "rotate": true,
                                                    "startDuration": 1,
                                                    "theme": "default",
                                                    "categoryAxis": {
                                                        "gridPosition": "start",
                                                        "autoGridCount": false,
                                                        "gridCount": 20
                                                    },
                                                    "listeners": [{
                                                    "event": "clickGraphItem",
                                                        "method": function (event) {
                                                            debugger;
                                                            GetDBindexDetail(event.item.dataContext.ItemNameType, event.item.dataContext.DBIndex, event.item.category,event.item.dataContext.xpRepeat);
                                                       }
                                                      }],
                                                    "trendLines": [],
                                                    "graphs": [
                                                        {
                                                            "fillAlphas": 1,
                                                            "id": "AmGraph-1",
                                                            "title": "Spare",
                                                            "type": "column",
                                                            "valueField": "Spare",
                                                            "size": 25,
                                                            "balloonText": "[[category]]:\n <b>[[value]] s</b>"

                                                        }
                                                    ],
                                                    "valueAxes": [
                                                        {
                                                            "id": "fyr ",
                                                            "title": "Total (s)"
                                                        }
                                                    ],
                                                    "allLabels": [],
                                                    "balloon": {},
                                                    "titles": [
                                                        {
                                                            "id": "FT",
                                                            "size": 15,
                                                            "tabIndex": 1,
                                                            "text": "Top 10 Spare"
                                                        }
                                                    ],
                                                    "dataProvider": @(new HtmlString(ViewBag.Top10_Spare))
                                                }
                                               );
                                              AmCharts.makeChart("Top10_Retry",
                                                {
                                                    "type": "serial",
                                                    "categoryField": "Item",
                                                    "rotate": true,
                                                    "startDuration": 1,
                                                    "theme": "default",
                                                    "categoryAxis": {
                                                        "gridPosition": "start",
                                                        "autoGridCount": false,
                                                        "gridCount": 20

                                                    },   "listeners": [{
                                                    "event": "clickGraphItem",
                                                        "method": function (event) {
                                                            debugger;
                                                            GetDBindexDetail(event.item.dataContext.ItemNameType, event.item.dataContext.DBIndex, event.item.category,event.item.dataContext.xpRepeat);
                                                       }
                                                      }],
                                                    "trendLines": [],
                                                    "graphs": [
                                                        {
                                                            "fillAlphas": 1,
                                                            "id": "AmGraph-1",
                                                            "title": "Retry",
                                                            "type": "column",
                                                            "valueField": "Retry",
                                                            "size": 25,
                                                            "balloonText": "[[category]]:\n <b>[[value]] times</b>"

                                                        }
                                                    ],
                                                    "valueAxes": [
                                                        {
                                                            "id": "fyr ",
                                                            "title": "Total (Frq)"
                                                        }
                                                    ],
                                                    "allLabels": [],
                                                    "balloon": {},
                                                    "titles": [
                                                        {
                                                            "id": "FT",
                                                            "size": 15,
                                                            "tabIndex": 1,
                                                            "text": "Top 10 Retry"
                                                        }
                                                    ],
                                                    "dataProvider": @(new HtmlString(ViewBag.Top10_Retry))
                                                }
                                            );
</script>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-info">
            <div class="white-box">
                <div class="table-responsive">
                    <a id="export" title="Export to Excel" href="@Url.Action("cusDataExport", "SpareTool",  new { Title = "SpareTool", org = TempData["Org"], itemnametype = TempData["ItemNameType"], startdate = TempData["StartDate"], enddate = TempData["EndDate"] })" target="_blank" style="float:right;">
                        <img src="~/Content/Excel.png" border="0">
                    </a>
                    <table class="display table" id="example" style="font-size: 20px">
                        <thead>
                            <tr style="text-align: right;">
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._DbIndex)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._TestItem)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._AvgSpare)</th>
                                <th>Distribution</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._AvgRetry)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._xpRepeat)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First().Timeout)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._PassDelay)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._FailDelay)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._FailDelay_Repeat)</th>
                                <th>@Html.DisplayNameFor(model => model.ItemSapreDatas.First()._MaxDelay)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ItemSapreDatas)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item._DbIndex)</td>
                                    <td><a href="#" onclick="GetDBindexDetail('@TempData["ItemNameType"]','@item._DbIndex','@item._TestItem','@item._xpRepeat')">@item._TestItem</a></td>
                                    <td>@Html.DisplayFor(modelItem => item._AvgSpare)</td>
                                    <td>
                                        @{
                                            if (Convert.ToDouble(item._Skewness_Second) > Convert.ToDouble(item._Skewness_First))
                                            {
                                                <a href="#" onclick="GetDistribution(''+@TempData["ItemNameType"]+'',''+@item._DbIndex+'',''+@item._AvgSpare+'')">
                                                    <label style="        color: blue">@item._Skewness_First</label> | <label style="        color: red">@item._Skewness_Second</label>
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="#" onclick="GetDistribution(''+@TempData["ItemNameType"]+'',''+@item._DbIndex+'',''+@item._AvgSpare+'')">
                                                    <label style="        color: blue">@item._Skewness_First</label> | <label style="        color: blue">@item._Skewness_Second</label>
                                                </a>
                                            }
                                        }
                                    </td>
                                    <td>@Html.DisplayFor(modelItem => item._AvgRetry)</td>
                                    <td>@Html.DisplayFor(modelItem => item._xpRepeat)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Timeout)</td>
                                    <td>@Html.DisplayFor(modelItem => item._PassDelay)</td>
                                    <td>@Html.DisplayFor(modelItem => item._FailDelay)</td>
                                    <td>@Html.DisplayFor(modelItem => item._FailDelay_Repeat)</td>
                                    <td>@Html.DisplayFor(modelItem => item._MaxDelay)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="showDistribution" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Distribution</h4>
            </div>
            <div class="modal-body">
                <div id="chart"></div>
            </div>
        </div>
    </div>
</div>
<script>
    var id = function (id) {
        return document.getElementById(id);
    };
    var table = id('example');
    var totRowIndex = table.getElementsByTagName('tr').length;
    var tfConfig = {
        base_path: '~/Content/TableFilter/',
        paging: {
            results_per_page: ['Records: ', [10, 25, 50, 100]]
        },
        col_1: 'select',
        alternate_rows: true,
        rows_counter: true,
        btn_reset: true,
        loader: true,
        status_bar: true,
        sort: true,
        sort_config: {
            sort_types: ['US', 'String', 'US', 'String', 'US', 'US', 'US', 'US', 'US', 'US', 'US']
        },
        mark_active_columns: true,
        highlight_keywords: true,
        col_types: [
            'number', 'string', 'number',
            'string', 'number', 'number',
            'number', 'number', 'number',
            'number', 'number'
        ],
        col_widths: [
            '100px', '350px', '130px',
            '130px', '130px', '110px',
            '110px', '130px', '130px',
            '130px', '130px'
        ],
        extensions: [{ name: 'sort' }]
    };
    var tf = new TableFilter('example', tfConfig);
    tf.init();
    function GetDistribution(ItemNameType, DBIndex,AvgSpare) {
          $('#showDistribution').modal('show');
        	$.ajax({
					url: "@Url.Action("GetDisTributionData", "SpareTool")",
					method: "post",
                contentType: 'application/json',
                data: JSON.stringify({ ItemNameType: ItemNameType, DBIndex: DBIndex }),
					success: function (data) {
               Highcharts.chart('chart', {
                  title: {
                          text: 'Spare Time Distribution'
                           },
                  xAxis: [{
                          title: { text: 'Data' },
                         alignTicks: false
                        }, {
                      title: { text: 'Histogram' },
                          alignTicks: false,
                          	plotLines: [ {
									value: AvgSpare,
							width: 2,
							color: 'red',
							zIndex: 100,
							dashStyle: 'dash',
							label: {
								text: 'X-Bar',
								align: 'center',
								y: 12,
								x: 0,
								style: {
									fontWeight: 'bold',
									fontSize: 20
								}
							}
						}],
                      opposite: true
                          }],
    yAxis: [{
        title: { text: 'Data' }
    }, {
        title: { text: 'Histogram' },
        opposite: true
    }],
    series: [{
        name: 'Histogram',
        type: 'histogram',
        xAxis: 1,
        yAxis: 1,
        baseSeries: 's1',
       binWidth: 500,
        zIndex: -1
    }, {
        name: 'Data',
            type: 'scatter',
        visible: false,
        data: data,
        id: 's1',
        marker: {
            radius: 1.5
        }
    }]
               });
                    }
                     });
        }

    function GetDBindexDetail(ItemNameType, DbIndex, TestItem,xpRepeat) {

        $.ajax({
            url: "@Url.Action("GetDBindexDetailData", "SpareTool")",
            method: "post",
            contentType: 'application/json',
            data: JSON.stringify({ ItemNameType: ItemNameType, DBIndex: DbIndex,TestItem:TestItem }),
            success: function (datas) {
                var data  = JSON.parse(datas);
                var precommand = "";
                var postcommand = "";
                var failcommand = "";

                for (var i = 0; i < data.length; i++) {
                  switch(data[i].CmdList) {
                      case 0:
                          precommand+="<li>[Delay="+data[i].Delay+"]"+data[i].Des+"[Repeat="+data[i].CmdRepeat+"]</li>"
    break;
                      case 1:

                          postcommand += "<li>[Delay=" + data[i].Delay + "]" + data[i].Des + "[Repeat=" + data[i].CmdRepeat + "]</li>";
                          break;
                      case 2:

                          failcommand += "<li>[Delay=" + data[i].Delay + "]" + data[i].Des + "[Repeat=" + data[i].CmdRepeat + "]</li>"
                          break;
                           case 3:

                          failcommand+="<li>[Delay="+data[i].Delay+"]"+data[i].Des+"[Repeat="+data[i].CmdRepeat+"]</li>"
                          break;
                        case 4:

                          postcommand+="<li>[Delay="+data[i].Delay+"]"+data[i].Des+"[Repeat="+data[i].CmdRepeat+"]</li>"
                          break;
                       case 5:

                          precommand += "<li>[Delay=" + data[i].Delay + "]" + data[i].Des + "[Repeat=" + data[i].CmdRepeat + "]</li>"
    break;
  default:
    // code block
}

                }

                $('#cmdTree').empty();
                $('#cmdTree').append('xpRepeat：' + xpRepeat)
                $('#cmdTree').append('<ul id="tree1"><li> <a href="#">' + TestItem + '</a><ul><li>PreCommand<ul>' + precommand + '</ul></li></ul><ul><li>PostCommand<ul>' + postcommand + '</ul></li></ul><ul><li>FailCommand<ul>' + failcommand + '</ul></li></ul></li> </ul>')

                $('#tree1').treed();

                   $('#showCommands').modal('show');
            }
        });
    }
</script>