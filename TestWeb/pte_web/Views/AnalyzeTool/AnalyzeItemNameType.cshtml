@using PTE_Web.Models;
@model AnalyzePageModels
@{
    ViewBag.Title = "AnalyzeItemNameType";
    Layout = "~/Views/Shared/_Layout_bootstrap.cshtml";
}
<style>
    .vertical {
        text-align: center;
        margin-top: 20px;
    }

    .textCenter {
        text-align: center
    }

    .nav-tabs > li > a,
    .nav-tabs > li > a:hover,
    .nav-tabs > li > a:focus {
        color: #3c763d;
    }

        .nav-tabs > .open > a,
        .nav-tabs > .open > a:hover,
        .nav-tabs > .open > a:focus,
        .nav-tabs > li > a:hover,
        .nav-tabs > li > a:focus {
            color: #3c763d;
            background-color: #d6e9c6;
        }

    .nav-tabs > li.active > a,
    .nav-tabs > li.active > a:hover,
    .nav-tabs > li.active > a:focus {
        color: #3c763d;
        background-color: #d6e9c6;
        border-color: #d6e9c6;
        border-bottom-color: #d6e9c6;
    }
</style>

<h2>【@ViewBag.TitleDescription】Item FailRate Tool</h2>
<!-- 日期選擇物件 Start-->
<div class="row">
    <div class="col-md-12">
        <div class="white-box">
            <form method="post" name="DateRangeForm" action="@ViewContext.RouteData.Values["action"]">
                <div class="input-group">
                    <b style="font-size:30px;"><span style="color:black">Org: </span></b>
                    <input name="org" style="width:120px;font-size:30px;padding-right:30px" type="text" value=@TempData["Org"]>
                    <b style="font-size:30px;"><span style="color:black">ItemNameType: </span></b>
                    <input name="itemnametype" style="width:120px;font-size:30px;padding-right:30px" type="text" value=@TempData["ItemNameType"]>
                    <b style="font-size:30px;padding-right:30px"><span style="color:black">  From </span></b>
                    <input class=flatpickr style="width:200px;font-size:30px;padding-right:30px" type="text" placeholder=@TempData["StartDate"] name="startdate" data-id="rangePlugin">
                    <b style="padding-right:30px;padding-left:30px;font-size:30px"><span style="color:black">  to   </span></b>
                    <input type="text" align="middle" style="padding-right:30px;width:200px;font-size:30px" placeholder=@TempData["EndDate"] id="secondRangeInput" name="enddate">
                    <input type='submit' class="btn waves-effect waves-light btn-primary" style="font-size:30px;margin-top:-20px;margin-left:15px;text-align:center;" value='Go' />
                    @Html.ActionLink("Item Cpk Outline", "CpkDataTable", "PTEWebDataBaseBrowser", new { @startdate = @TempData["StartDate"], @enddate = @TempData["EndDate"], @itemnametype = @TempData["ItemNameType"], @org = @TempData["Org"] }, new { target = "_blank", @class = "btn waves-effect waves-light btn-info", @style = "font-size:30px;margin-top:-20px;margin-left:15px;text-align:center;" })
                </div>
            </form>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-info">
            <div class="white-box">
                <div class="table-responsive">
                    <table class="display table" style="font-size:20px">
                        <thead>
                            <tr style="text-align: center;">
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().Org)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().Description)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().FYR)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().Total)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().FYRDelta)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().Fail_Rate)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().FailRateDelta)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().Retry_Rate)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().RetryRateDelta)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().Avg_Pass_Time)</th>
                                <th>@Html.DisplayNameFor(model => model.FYRTable.First().SpareDelta)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.FYRTable)
                            {
                                <tr style="text-align: center;">
                                    <td>@Html.DisplayFor(modelItem => item.Org)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                                    <td>@Html.DisplayFor(modelItem => item.FYR)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Total)</td>
                                    <td><span style="color:@item.FYRColor">@Html.DisplayFor(modelItem => item.FYRDelta)</span></td>
                                    <td>@Html.DisplayFor(modelItem => item.Fail_Rate)</td>
                                    <td><span style="color:@item.FRColor">@Html.DisplayFor(modelItem => item.FailRateDelta)</span></td>
                                    <td>@Html.DisplayFor(modelItem => item.Retry_Rate)</td>
                                    <td><span style="color:@item.RTRColor">@Html.DisplayFor(modelItem => item.RetryRateDelta)</span></td>
                                    <td>@Html.DisplayFor(modelItem => item.Avg_Pass_Time)</td>
                                    <td><span style="color:@item.SpareColor">@Html.DisplayFor(modelItem => item.SpareDelta)</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="white-box">
            <div id="container_2" class="col" style="min-width: 300px; height: 300px;"></div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="white-box">
            <div id="container_1" class="col" style="min-width: 300px; height: 300px;"></div>
        </div>
    </div>
    <script type="text/javascript">
                                            AmCharts.makeChart("container_2",
                                                {
                                                    "type": "serial",
                                                    "categoryField": "ItemName",
                                                    "rotate": true,
                                                    "startDuration": 1,
                                                    "theme": "default",
                                                    "categoryAxis": {
                                                        "gridPosition": "start",
                                                        "autoGridCount": false,
                                                        "gridCount": 20
                                                    },
                                                    "trendLines": [],
                                                    "graphs": [
                                                        {
                                                            "fillAlphas": 1,
                                                            "id": "AmGraph-1",
                                                            "title": "FailCount",
                                                            "type": "column",
                                                            "valueField": "FailCount",
                                                            "size": 25,
                                                            "balloonText": "[[category]]:\n <b>[[value]] units</b>"

                                                        }
                                                    ],
                                                    "valueAxes": [
                                                        {
                                                            "id": "FailCount ",
                                                            "title": "Total (pic)"
                                                        }
                                                    ],
                                                    "allLabels": [],
                                                    "balloon": {},
                                                    "titles": [
                                                        {
                                                            "id": "FT",
                                                            "size": 15,
                                                            "tabIndex": 1,
                                                            "text": "Top FailItem"
                                                        }
                                                    ],
                                                    "dataProvider": @(new HtmlString(ViewBag.TopFailItemJsonList))
                                                }
                                            );
    </script>
    <script type="text/javascript">
                                            AmCharts.makeChart("container_1",
                                                {
                                                    "type": "serial",
                                                    "categoryField": "Item",
                                                    "rotate": true,
                                                    "startDuration": 1,
                                                    "theme": "default",
                                                    "categoryAxis": {
                                                        "gridPosition": "start",
                                                        "autoGridCount": false,
                                                        "gridCount": 20
                                                    },
                                                    "trendLines": [],
                                                    "graphs": [
                                                        {
                                                            "fillAlphas": 1,
                                                            "id": "AmGraph-1",
                                                            "title": "Spare",
                                                            "type": "column",
                                                            "valueField": "Spare",
                                                            "balloonText": "[[category]]:\n <b>[[value]] s</b>"
                                                        }
                                                    ],
                                                    "valueAxes": [
                                                        {
                                                            "id": "spare ",
                                                            "title": "Spare (s)"
                                                        }
                                                    ],
                                                    "allLabels": [],
                                                    "balloon": {},
                                                    "titles": [
                                                        {
                                                            "id": "FT",
                                                            "size": 15,
                                                            "tabIndex": 1,
                                                            "text": "Top Long Cycle"
                                                        }
                                                    ],
                                                    "dataProvider": @(new HtmlString(ViewBag.TopSpareItemJsonList))
                                                }
                                            );
    </script>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="white-box">
            <h2 class="header-title">Daily Production Chart <b>(UPH: @ViewBag.ItemUPH)</b> </h2>
            <div id="chartdiv" style="height:700px"></div>
        </div>
        <div class="modal fade" id="IssuesModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myIssueLabel">Issue Content</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <span>Issues</span>
                                <div id="IssueContent"></div>
                            </div>
                            <div class="col-md-6">
                                <span>Reply</span>
                                <table class="table table-bordered table-responsive table-hover">
                                    <tr>
                                        <th style="width: 80px;  text-align: center;">User</th>
                                        <th style="width: 500px; text-align: center;">Common</th>
                                        <th style="width: 50px; text-align: center;">File</th>
                                        <th style="width:150px; text-align: center;">CreateTime</th>
                                    </tr>
                                    <tbody id="IssueReply"></tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="white-box">
            @*<div style="clear: both">
                <h2 class="header-title">All Item Analyze Table</h2>
                @Html.ActionLink("Item Cpk Outline", "CpkDataTable", "PTEWebDataBaseBrowser", new { @startdate = @TempData["StartDate"], @enddate = @TempData["EndDate"], @itemnametype = @TempData["ItemNameType"], @org = @TempData["Org"] }, new { target = "_blank", @class = "btn btn-info", @style = "float: right" })
            </div>*@
            <h2 class="header-title">All Item Analyze Table</h2>

            <div class="table-responsive" style="height:700px">
                <table id="example3" class="display table" style="font-size:15px">
                    <thead>
                        <tr style="text-align: right">
                            <th>Correlation & CPK</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().Order)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().FailItem)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().ItemName)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().FixtureRelation)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().FailRate)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().FailCount)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().SpecMin)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().SpecMax)</th>
                            <th>@Html.DisplayNameFor(model => model.FailItemModel.First().TotalCount)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.FailItemModel)
                        {
                        <tr>
                            <td>
                                @Html.ActionLink("Detail", "CorrelationWindow", "AnalyzeTool", new { @failitem = item.FailItem, @itemdescript = item.ItemName, @type = "Fixture", @spec_max = item.SpecMax == "" ? "-999" : item.SpecMax, @spec_min = item.SpecMin == "" ? "-999" : item.SpecMin }, new { target = "_blank", @class = "btn btn-success" })
                                @if (item.SpecMax == "" || item.SpecMin == "" || item.SpecMax == null || item.SpecMin == null)
                                {
                                    <button type="button" disabled id="btnAdd" class="btn btn-default" onclick="getHistogram('@TempData["Org"]','@TempData["ItemNameType"]','@TempData["StartDate"]','@TempData["EndDate"]','@TempData["Source"]','@item.FailItem', '@item.ItemName.Replace("\n"," ")','@item.SpecMin','@item.SpecMax','@item.TotalCount','@item.FailCount');GetResultsJSON('@TempData["Org"]', '@TempData["Source"]','@TempData["ItemNameType"]', '@item.FailItem', '@item.SpecMin', '@item.SpecMax', '@TempData["StartDate"]', '@TempData["EndDate"]');"><i class="fa fa-bar-chart-o"></i> CPK</button>

                                }
                                @if (item.SpecMax != "" && item.SpecMin != "" && item.SpecMax != null && item.SpecMin != null)
                                {
                                    <button type="button" id="btnAdd" class="btn btn-default" onclick="getHistogram('@TempData["Org"]','@TempData["ItemNameType"]','@TempData["StartDate"]','@TempData["EndDate"]','@TempData["Source"]','@item.FailItem', '@item.ItemName.Replace("\n"," ")','@item.SpecMin','@item.SpecMax','@item.TotalCount','@item.FailCount');GetResultsJSON('@TempData["Org"]', '@TempData["Source"]','@TempData["ItemNameType"]', '@item.FailItem', '@item.SpecMin', '@item.SpecMax', '@TempData["StartDate"]', '@TempData["EndDate"]');"><i class="fa fa-bar-chart-o"></i> CPK</button>

                                }
                            </td>
                            <td>@Html.DisplayFor(modelItem => item.Order)</td>
                            <td>@Html.DisplayFor(modelItem => item.FailItem)</td>
                            <td>@Html.DisplayFor(modelItem => item.ItemName)</td>
                            <td>@Html.DisplayFor(modelItem => item.FixtureRelation)</td>
                            <td>@Html.DisplayFor(modelItem => item.FailRate)</td>
                            <td>@Html.DisplayFor(modelItem => item.FailCount)</td>
                            <td> @item.SpecMin</td>
                            <td> @item.SpecMax</td>
                            <td>@Html.DisplayFor(modelItem => item.TotalCount)</td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="modal fade" id="DailyModal" role="dialog" aria-labelledby="DailyModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-2">
                                <h2>JobNumber</h2>
                            </div>
                            <div class="col-md-2">
                                <h2> Spare</h2>
                            </div>
                            <div class="col-md-5">
                                <h2> Fail Item</h2>
                            </div>
                            <div class="col-md-3 textCenter">
                                <h2>  FYR</h2>
                            </div>
                        </div>
                    </div>
                    <div class="container" id="DailyModel_id">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <script data-config>
        var id = function (id) {
            return document.getElementById(id);
        };
        var table = id('example3');
        var totRowIndex = table.getElementsByTagName('tr').length;
        var tfConfig = {
            // instruct TableFilter location to import ressources from
            base_path: '~/Content/TableFilter/',
            paging: {
                results_per_page: ['Records: ', [10, 25, 50, 100]]
            },
            alternate_rows: true,
            rows_counter: true,
            btn_reset: true,
            loader: true,
            status_bar: true,
            //sort: true,
            //sort_config: {
            //    sort_types: ['String', 'US', 'US', 'US', 'US']
            //},
            mark_active_columns: true,
            highlight_keywords: true,
            col_types: [
                'string','number', 'number', 'string', 'string', 'number', 'number', 'number', 'number', 'number',
            ],
            col_widths: [
                '180px','50px', '50px', '200px', '100px', '100px', '100px', '100px', '100px', '100px'
            ],

        };

        var tf = new TableFilter('example3', tfConfig);

        tf.init();
    </script>

    <style>
        .modal-lg {
            min-width: 80% !important;
        }
    </style>
    <link href="~/Content/tooltip.css" rel="stylesheet" />
    <div class="modal fade" id="showDistribution" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">CPK Info</h4>
                </div>
                <div class="modal-body">
                    <div class="panel with-nav-tabs panel-success">
                        <ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#tab1">Detail</a></li>
                            <li><a data-toggle="tab" href="#menu1">Item Daily Fail</a></li>
                            <li><a data-toggle="tab" href="#menu2">Cpk Calculator</a></li>
                        </ul>
                        <div class="tab-content">
                            <div id="tab1" class="tab-pane fade in active">
                                <a id="exportFailItem" title="取得Raw Data Excel" href="#" onclick="FailItemToCSVConvertor()" style="float:left;">
                                    <img src="~/Content/Excel.png" border="0">
                                </a>
                                <table class="table" id="ItemCPKTbl" style="margin-top:20px;"></table>
                            </div>
                            <div id="menu1" class="tab-pane fade">
                                <div id="chart_divCPK" style="min-height:500px"></div>
                            </div>
                            <div id="menu2" class="tab-pane fade">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="row">
                                                    <fieldset>
                                                        <legend>Cpk Calculator</legend>
                                                        <div class="row">
                                                            <div class="col-xs-3">
                                                                <div class="form-group">
                                                                    @Html.Label("ftxt_min", HttpUtility.HtmlDecode("&nbsp;"), new { @class = "control-label" })
                                                                    @Html.TextBox("ftxt_min", "", new { id = "ftxt_min", @class = "form-control input-lg", style = "font-size: 25px", placeholder = "篩選Min" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-3">
                                                                <div class="form-group">
                                                                    @Html.Label("ftxt_max", HttpUtility.HtmlDecode("&nbsp;"), new { @class = "control-label" })
                                                                    @Html.TextBox("ftxt_max", "", new { id = "ftxt_max", @class = "form-control input-lg", style = "font-size: 25px", placeholder = "篩選Max" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-2">
                                                                @Html.Label("", HttpUtility.HtmlDecode("&nbsp;"), new { @class = "control-label" })
                                                                <div class="form-group">
                                                                    <button id="filterBtn" class="btn btn-primary btn-lg" onclick="FinFilter()">資料篩選</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-xs-3">
                                                                <div class="form-group">

                                                                    @Html.Label("txt_min", HttpUtility.HtmlDecode("&nbsp;"), new { @class = "control-label" })
                                                                    @Html.TextBox("txt_min", "MIN", new { id = "txt_min", @disabled = "disabled", @class = "form-control input-lg", style = "font-size: 25px", placeholder = "MIN" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-3">
                                                                <div class="form-group">
                                                                    @Html.Label("txt_max", HttpUtility.HtmlDecode("&nbsp;"), new { @class = "control-label" })
                                                                    @Html.TextBox("txt_max", "MAX", new { id = "txt_max", @disabled = "disabled", @class = "form-control input-lg", style = "font-size: 25px", placeholder = "MAX" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-3">
                                                                <div class="form-group">
                                                                    @Html.Label("txt_cpk", "Value", new { @class = "control-label" })

                                                                    @Html.TextBox("txt_cpk", "", new { id = "txt_cpk", @class = "form-control input-lg", style = "font-size: 25px;border-width: 2px; border-color: #ff6a00;", @disabled = "disabled", placeholder = "CPK" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-2">
                                                                @Html.Label("", HttpUtility.HtmlDecode("&nbsp;"), new { @class = "control-label" })
                                                                <div class="form-group">
                                                                    <button id="calCPKBtn" type="submit" class="btn btn-primary btn-lg" onclick="calNewSpec()" disabled>Cal</button>
                                                                </div>
                                                                <div class="form-group">
                                                                    <div class="help-tip">
                                                                        <p>
                                                                            Cp=T/(6σ)，T=規格上限(USL) – 規格下限(LSL)<br />
                                                                            a = M - X：	代表規格中心(也就是製程之期望中心)與實際製造出來之群體中心的距離。<br />
                                                                            M：產品中心位置（規格中心）<br />
                                                                            X：群體的中心（平均值）<br />
                                                                            b = T / 2：	代表規格的一半。<br />
                                                                            T：規格寬度（規格上限 - 規格下限）<br />
                                                                            Ck=a/b=(M-X)/(T/2)<br />
                                                                            CPK=(1 - Ck) * Cp<br />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <fieldset>
                                                <legend>Controller Tool</legend>

                                                <div id="BinButton"></div>
                                                <br />

                                                <div class="col-xs-3">

                                                    <div class="form-group">
                                                        @Html.TextBox("Bin_Text", "", new { id = "Bin_Text", onfocus = "$(this).val('');'';", onblur = "if(!binFlag){this.placeholder = 'Bin_Width';}else{this.placeholder='Bin_Number'}", @class = "form-control input-lg", style = "font-size: 25px;", placeholder = "Bin_Width" })
                                                    </div>
                                                </div>
                                                <div class="col-xs-1">

                                                    <div class="form-group">

                                                        <button type="submit" class="btn btn-primary btn-lg" onclick="calNewBin()">Cal</button>
                                                    </div>
                                                </div>
                                            </fieldset>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-xs-12">
                                                    <div id="chart_div"></div>
                                                </div>
                                                <div class="col-xs-11">
                                                    <div>
                                                        <button id="ResetButton" type="button" class="btn btn-danger" onclick="resetChart()"><i class="fa fa-refresh" style="font-size:24px">Reset</i></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        $('#BinButton').btnSwitch({

            Theme: "Swipe",
            // on/off text
            OnText: "BinWidth",
            ToggleState: false,

            OffText: "BinNumber",
            // values of on/off buttons
            OnValue: true,
            OnCallback: function (val) {
                $('#Bin_Text').val("");
                $('#Bin_Text').attr("placeholder", "Bin_Number");
                binFlag = true;
            },
            OffValue: false,
            OffCallback: function (val) {
                $('#Bin_Text').val("");
                $('#Bin_Text').attr("placeholder", "Bin_Width");
                binFlag = false;
            }

        });
    </script>
    <script>
			var chart;

			var histogram_Passdata;
			var histogram_Faildata;
			var CPK_SD;
			var AVG;
			var DBIndex;
			var DataMin;
			var DataMax;
			var passStr;
			var failStr;
            var OriginTitle;
    function calNewRange() {
        if ($('#ftxt_min').val() != '' || $('#ftxt_max').val() != '') {
            chart.showLoading();
				removeAllseries();
				$.ajax({
					url: "@Url.Action("GetNewRangeData", "AnalyzeTool")",
					method: "post",
					contentType: 'application/json',
					data: JSON.stringify({ PassStr: passStr, FailStr: failStr, Min: $('#ftxt_min').val(), Max: $('#ftxt_max').val() }),
					success: function (data) {
						histogram_Faildata = data.FailDatas;
						histogram_Passdata = data.PassDatas;
						var lsl = parseFloat($('#ftxt_min').val())
						var usl = parseFloat($('#ftxt_max').val())
						 if (data.PassDatas.length > 0) {
							ChartSeries = [{
								name: 'Pass',
								type: 'histogram',
								xAxis: 1,
								yAxis: 1,
								baseSeries: 's1',
								zIndex: -1
							}, {
								name: 'Data',
								type: 'scatter',
								visible: false,
								data: histogram_Passdata,
								id: 's1',
								marker: {
									radius: 1.5
								}
							}]
						} else {
							alert('Range 選擇錯誤，此段Range無任何測試資料');
							return 0;
						}
						for (var i = 0; i < ChartSeries.length; i++) {
							chart.addSeries(ChartSeries[i]);
                        }
                        chart.xAxis[1].update({
                            min: data.lsl,
                            max: data.usl,
                            series: ChartSeries
                        });					
					}
                });
            }   


		}
			var newHistogramData
            function FinFilter() {
                calNewRange();
                $('#ftxt_min').prop("disabled", true);
                $('#ftxt_max').prop("disabled", true);
                $('#filterBtn').prop("disabled", true);

                $('#txt_min').prop("disabled", false);
                $('#txt_max').prop("disabled", false);
                $('#calCPKBtn').prop("disabled", false);

            }
    function calNewSpec() {
                $('#ftxt_min').prop("disabled", false);
                $('#ftxt_max').prop("disabled", false);
                $('#filterBtn').prop("disabled", false);
                $('#txt_min').prop("disabled", true);
                $('#txt_max').prop("disabled", true);
                $('#calCPKBtn').prop("disabled", true);
				var min_value = $('#ftxt_min').val();//filter min
                var max_value = $('#ftxt_max').val();//filter max
                var lsl_value= $('#txt_min').val();
                var usl_value = $('#txt_max').val();
				$.ajax({
					url: "@Url.Action("GetNewSpecData", "AnalyzeTool")",
					method: "post",
					contentType: 'application/json',
					data: JSON.stringify({ PassStr: passStr, FailStr: failStr, Low: lsl_value, Upper: usl_value,fmin:min_value,fmax:max_value }),
					success: function (data) {
                var Cp = (parseFloat(usl_value) - parseFloat(lsl_value)) / (6 * data.STD);
                var M = (parseFloat(usl_value) + parseFloat(lsl_value)) / 2;
                var X = data.AVG;
				var T = (parseFloat(usl_value) - parseFloat(lsl_value));
				var Ck = (M - X) / (T / 2);                             //Ck=a/b=(M-X)/(T/2)
                var Cpk = Math.round((1 - Ck) * Cp * 100) / 100;
                $('#txt_cpk').val(Cpk);
                $('#txt_cpk').css({ 'background-color': '#FFE4C4' });
						var ChartSeries;
						var PlotLine;
						newHistogramData = data.PassDatas;
						var lsl = parseFloat(lsl_value) < parseFloat(DataMin) ? parseFloat(lsl_value) : parseFloat(DataMin)
						var usl = parseFloat(usl_value) > parseFloat(DataMax) ? parseFloat(usl_value) : parseFloat(DataMax)
						if (data.PassDatas.length > 0) {
							PlotLine = [{
								value: lsl_value,
								width: 2,
								color: 'green',
								zIndex: 100,
								dashStyle: 'dash',
								id:'p3',
								label: {
									text: '    LSL(new): ' + lsl_value,
									align: 'center',
									y: 12,
									x: 0,
									style: {
										fontWeight: 'bold',
										fontSize: 20
									}
								}
                            },
                                {
								value: data.AVG,
								width: 2,
								color: 'blue',
								zIndex: 100,
								dashStyle: 'dash',
								id:'p4',
								label: {
									text: ' AVG(new)',
									align: 'center',
									y: 12,
									x: 0,
									style: {
										fontWeight: 'bold',
										fontSize: 20
									}
								}
							},
                                {
								value: usl_value,
								width: 2,
								color: 'green',
								zIndex: 100,
							    dashStyle: 'dash',
							    id: 'p5',
								label: {
									text: '    USL(new): ' + usl_value,
									align: 'center',
									y: 12,
									x: 0,
									style: {
										fontWeight: 'bold',
										fontSize: 20
									}
								}
							}
							]
						} else {
							alert('Range 選擇錯誤，此段Range無任何測試資料');
							return 0;
						}
                        chart.xAxis[1].removePlotLine('s3');
                        chart.xAxis[1].removePlotLine('s4');
                        chart.xAxis[1].removePlotLine('s5');
					    chart.xAxis[1].removePlotLine('p3');
                        chart.xAxis[1].removePlotLine('p4');
                        chart.xAxis[1].removePlotLine('p5');
                        for (var i = 0; i < 3; i++) {
                            chart.xAxis[1].addPlotLine(PlotLine[i]);
                        }
                        chart.setTitle({ text: OriginTitle + '<br />平均數μ(new):' + data.AVG.toFixed(2) + ' / 標準差σ(new):' + data.STD.toFixed(2) + '/ 製程能力Cpk(new):' + Cpk });
					}
                });
			}
			function removeAllseries() {
				var seriesLength = chart.series.length;
				for (var i = seriesLength - 1; i > -1; i--) {
					chart.series[i].remove();
				}
			}
			var binFlag = false;
			function calNewBin() {
				var BinWidth = "";
				var BinNumber = "";

				if (isNaN($('#Bin_Text').val()) || $('#Bin_Text').val()=="") {   //兩邊都空白圖不變
					BinWidth = chart.series[0].binWidth
					BinNumber = parseInt(Math.sqrt(histogram_Passdata.length + histogram_Faildata.length));
				}

				else if (binFlag) {
					BinWidth = null;
					BinNumber = parseInt ($('#Bin_Text').val());
				}
				else if (!binFlag) {
					BinWidth = parseFloat($('#Bin_Text').val())
					BinNumber = parseInt(Math.sqrt(histogram_Passdata.length + histogram_Faildata.length));

				}

				if (histogram_Passdata.length > 0 && histogram_Faildata.length > 0) {
					chart.update({
						series: [{
							name: 'Pass',
							type: 'histogram',
							xAxis: 1,
							yAxis: 1,
							baseSeries: 's1',
							zIndex: -1,
							binWidth: BinWidth,
							binsNumber: BinNumber
						}, {
							name: 'Data(Pass)',
							type: 'scatter',
							visible: false,
							data: histogram_Passdata,
							id: 's1',
							marker: {
								radius: 1.5
							}
						}, {
							name: 'Fail',
							type: 'histogram',
							xAxis: 1,
							yAxis: 1,
							baseSeries: 's2',
							zIndex: -1,
							binWidth: BinWidth,
							binsNumber:   BinNumber
						}, {
							name: 'Data(Fail)',
							type: 'scatter',
							visible: false,
							data: histogram_Faildata,
							id: 's2',
							marker: {
								radius: 1.5
							}
						}]
					});
				}
				else if (histogram_Passdata.length > 0 && histogram_Faildata.length == 0) {
					chart.update({
						series: [{
							name: 'Pass',
							type: 'histogram',
							xAxis: 1,
							yAxis: 1,
							baseSeries: 's1',
							zIndex: -1,
							binWidth: BinWidth,
							binsNumber:  BinNumber
						}, {
							name: 'Data(Pass)',
							type: 'scatter',
							visible: false,
							data: histogram_Passdata,
							id: 's1',
							marker: {
								radius: 1.5
							}
						}]
					});
				}
				else if (histogram_Passdata.length == 0 && histogram_Faildata.length > 0) {
					chart.update({
						series: [{
							name: 'Fail',
							type: 'histogram',
							xAxis: 1,
							yAxis: 1,
							baseSeries: 's2',
							zIndex: -1,
							binWidth: BinWidth,
							binsNumber: BinNumber
						}, {
							name: 'Data(Fail)',
							type: 'scatter',
							visible: false,
							data: histogram_Faildata,
							id: 's2',
							marker: {
								radius: 1.5
							}
						}]
					});
				} else {
					alert('Range 設定錯誤，Bin調整功能無效')
				}
			}
			var ChartClone;

			function resetChart() {

				removeAllseries();
				histogram_Faildata = ChartClone.histogram_Faildata
				histogram_Passdata = ChartClone.histogram_Passdata

				chart.update({
					xAxis: [{
						title: { text: 'Data' },
						alignTicks: false,
						visible: false
					}, {
						title: { text: 'Histogram' },
						alignTicks: false,
							opposite: true,
							max: ChartClone.Max,
							min: ChartClone.Min,
							plotLines: [{
								value: ChartClone.LSL,
							width: 2,
							color: 'red',
							zIndex: 100,
							dashStyle: 'dash',
							label: {
								text: '    LSL: ' + ChartClone.LSL,
								align: 'center',
								y: 12,
								x: 0,
								style: {
									fontWeight: 'bold',
									fontSize: 20
								}
							}
                            },
                                {
								value: ChartClone.AVG,
								width: 2,
								color: 'blue',
								zIndex: 100,
								dashStyle: 'dash',
								id:'p4',
								label: {
									text: ' AVG',
									align: 'center',
									y: 12,
									x: 0,
									style: {
										fontWeight: 'bold',
										fontSize: 20
									}
								}
							},

                                {
									value: ChartClone.USL,
							width: 2,
							color: 'red',
							zIndex: 100,
							dashStyle: 'dash',
							label: {
								text: '    USL: ' + ChartClone.USL,
								align: 'center',
								y: 12,
								x: 0,
								style: {
									fontWeight: 'bold',
									fontSize: 20
								}
							}
						}],
					}],
					yAxis: [{
						title: { text: 'Data' }
					}, {
						title: { text: 'Count' },
						opposite: true
						}],

				});
				for (var i = 0; i < ChartClone.ChartSeries.length; i++) {
					chart.addSeries(ChartClone.ChartSeries[i]);
				}
				chart.zoomOut();
                chart.setTitle({ text: OriginTitle });
    }
    var FailItemRawDataUrl = "";
    function getHistogram(Org, ItemNameType, St, Et, Source, dbIndex, itemDesc,specMin,specMax,total,failcount) {
        $.ajax({
            url: "@Url.Action("Get_CPKData", "AnalyzeTool")",
            method: "post",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify({ org: Org, itemnametype: ItemNameType, startdate: St, enddate: Et, source: Source, DbIndex: dbIndex, specMin: specMin, specMax: specMax }),
            success: function (data) {
                $('#showDistribution').modal('show');
                FailItemRawDataUrl = JSON.stringify({ org: Org, itemnametype: ItemNameType, startdate: St, enddate: Et, source: Source, DbIndex: dbIndex, specMin: specMin, specMax: specMax });
                getCpkTbl(itemDesc, specMin + '-' + specMax, total, failcount, St + ' ~ ' + Et, 0, data.CpkTable[0].Cpk)
                passStr = data.CpkTable[0].PassStr;
                failStr = data.CpkTable[0].FailStr;
                $('#txt_min').val(specMin);
                $('#txt_max').val(specMax);
                $('#txt_cpk').val(data.CpkTable[0].Cpk);
                $('#ftxt_min').val("");
                $('#ftxt_max').val("");
                $('#ftxt_min').prop("disabled", false);
                $('#ftxt_max').prop("disabled", false);
                $('#filterBtn').prop("disabled", false);
                $('#txt_min').prop("disabled", true);
                $('#txt_max').prop("disabled", true);
                $('#calCPKBtn').prop("disabled", true);
                histogram_Passdata = JSON.parse(passStr);
                histogram_Faildata = JSON.parse(failStr);
                CPK_SD = data.CpkTable[0].SD;
                AVG = data.CpkTable[0].AVG;
                DBIndex = dbIndex;
                DataMin = parseFloat(data.CpkTable[0].dataMin);
                DataMax = parseFloat(data.CpkTable[0].dataMax);
                var Datalsl = parseFloat(specMin);
                var Datausl = parseFloat(specMax);
                var ChartSeries;
                if (histogram_Faildata.length > 0) {
                    ChartSeries = [{
                        name: 'Pass',
                        type: 'histogram',
                        xAxis: 1,
                        yAxis: 1,
                        baseSeries: 's1',
                        zIndex: -1
                    }, {
                        name: 'Data(Pass)',
                        type: 'scatter',
                        visible: false,
                        data: histogram_Passdata,
                        id: 's1',
                        marker: {
                            radius: 1.5
                        }
                    }, {
                        name: 'Fail',
                        type: 'histogram',
                        xAxis: 1,
                        yAxis: 1,
                        baseSeries: 's2',
                        zIndex: -1
                    }, {
                        name: 'Data(Fail)',
                        type: 'scatter',
                        visible: false,
                        data: histogram_Faildata,
                        id: 's2',
                        marker: {
                            radius: 1.5
                        }
                    }]
                } else {
                    ChartSeries = [{
                        name: 'Pass',
                        type: 'histogram',
                        xAxis: 1,
                        yAxis: 1,
                        baseSeries: 's1',
                        zIndex: -1
                    }, {
                        name: 'Data(Pass)',
                        type: 'scatter',
                        visible: false,
                        data: histogram_Passdata,
                        id: 's1',
                        marker: {
                            radius: 1.5
                        }
                    }]
                }
                OriginTitle = itemDesc + '\'s Histogram<br />平均數μ:' + data.CpkTable[0].AVG.toFixed(2) + '/ 標準差σ:' + data.CpkTable[0].SD.toFixed(2) + '/ 製程能力Cpk: ' + data.CpkTable[0].Cpk.toFixed(2)
                chart = Highcharts.chart('chart_div', {
                    chart: {
                        zoomType: 'x'
                    },
                    title: {
                        text: OriginTitle
                    },
                    xAxis: [{
                        title: { text: 'Data' },
                        alignTicks: false,
                        visible: false
                    }, {
                        title: { text: 'Histogram' },
                        alignTicks: false,
                        opposite: true,
                        max: DataMax,
                        min: DataMin,
                        plotLines: [{
                            value: Datalsl,
                            width: 2,
                            color: 'red',
                            zIndex: 100,
                            dashStyle: 'dash',
                            id: 's3',
                            label: {
                                text: '    LSL: ' + Datalsl,
                                align: 'center',
                                y: 12,
                                x: 0,
                                style: {
                                    fontWeight: 'bold',
                                    fontSize: 20
                                }
                            }
                        },
                        {
                            value: data.CpkTable[0].AVG,
                            width: 2,
                            color: 'blue',
                            zIndex: 100,
                            dashStyle: 'dash',
                            id: 's4',
                            label: {
                                text: ' AVG',
                                align: 'center',
                                y: 12,
                                x: 0,
                                style: {
                                    fontWeight: 'bold',
                                    fontSize: 20
                                }
                            }
                        },

                        {
                            value: Datausl,
                            width: 2,
                            color: 'red',
                            zIndex: 100,
                            dashStyle: 'dash',
                            id: 's5',
                            label: {
                                text: '    USL: ' + Datausl,
                                align: 'center',
                                y: 12,
                                x: 0,
                                style: {
                                    fontWeight: 'bold',
                                    fontSize: 20
                                }
                            }
                        }],
                    }],
                    yAxis: [{
                        title: { text: 'Data' }
                    }, {
                        title: { text: 'Count' },
                        opposite: true
                    }],
                    series: ChartSeries,
                    plotOptions: {
                        series: {
                            events: {
                                afterAnimate: function () {
                                    chart.hideLoading();
                                }
                            }
                        }
                    },
                });
                $('#bintext').val(chart.series[0].binWidth.toFixed(4))

                ChartClone = { histogram_Passdata: histogram_Passdata, histogram_Faildata: histogram_Faildata, Min: DataMin, Max: DataMax, LSL: Datalsl, USL: Datausl, ChartSeries: ChartSeries, AVG: data.CpkTable[0].AVG };
            }, error: function (e) {
                debugger;

            }
        });
    }

    function FailItemToCSVConvertor() {

        var JsonData = FailItemRawDataUrl
        $.ajax({
            url: "@Url.Action("Get_CPKRawData", "AnalyzeTool")",
            method: "post",
            contentType: 'application/json',
            async: false,
            data: JsonData,
            success: function (data) {

                var bytes = new Uint8Array(data.FileContents);
                    var blob = new Blob([bytes], {type: "application/vnd.ms-excel" });
                   if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                   window.navigator.msSaveOrOpenBlob(blob, "RawData.csv");
                   }
                   else {
                   var objectUrl = URL.createObjectURL(blob);
                   window.open(objectUrl);
                    }
                   window.URL.revokeObjectURL(url);
            },
            error: function (e) {

            }
            });
     }

    function GetResultsJSON(Org, Source, ItemNameType, DBIndex, specMin, specMax, st, et) {

        var s = "";
				$.ajax({
					type: 'POST',
					url: "@Url.Action("GetMonthCpkTrendResults", "AnalyzeTool")",
					//url: './AnalyzeTool/GetMonthCpkTrendResults?Org=' + Org + '&Source=' + Source + '&ItemNameType=' + ItemNameType + '&DBIndex=' + DBIndex + '&specMin=' + specMin + '&specMax=' + specMax + "&st=" + st + "&et=" + et,
					data: JSON.stringify({ Org: Org, Source: Source, ItemNameType: ItemNameType, DBIndex: DBIndex, specMin: specMin, specMax: specMax, st: st,et:et}),
					contentType: 'application/json',
					success: function (data) {
						var cpKData = [];
						for (var i = 0; i < data.L_Date.length; i++) {
							cpKData.push({
								Date: new Date(data.L_Date[i]),
								FailRate: data.FailRates[i],
								Cpk: data.CPKs[i]
							});
                        }

						var CPKLineChart = am4core.create("chart_divCPK", am4charts.XYChart);
						CPKLineChart.data = cpKData;
						CPKLineChart.colors.step = 2;
						var dateAxis = CPKLineChart.xAxes.push(new am4charts.DateAxis());
						dateAxis.renderer.grid.template.location = 0;
						dateAxis.renderer.minGridDistance = 50;
						dateAxis.renderer.grid.template.disabled = true;
						dateAxis.renderer.fullWidthTooltip = true;
						var FailRateAxis = CPKLineChart.yAxes.push(new am4charts.ValueAxis());
						FailRateAxis.title.text = "FailRate(%)";
						FailRateAxis.renderer.grid.template.disabled = true;
						var CpkAxis = CPKLineChart.yAxes.push(new am4charts.ValueAxis());
						CpkAxis.title.text = "Cpk";
						CpkAxis.renderer.grid.template.disabled = true;
						CpkAxis.renderer.opposite = true;
						// Create series
						var CpkSeries = CPKLineChart.series.push(new am4charts.LineSeries());
						CpkSeries.dataFields.valueY = "Cpk";
						CpkSeries.dataFields.dateX = "Date";
						CpkSeries.yAxis = CpkAxis;
						CpkSeries.name = "Cpk";
						CpkSeries.strokeWidth = 2;
						CpkSeries.propertyFields.strokeDasharray = "dashLength";
						CpkSeries.tooltipText = "Cpk: {valueY} ";
						CpkAxis.renderer.labels.template.fill = CpkSeries.stroke;
						var CpkBullet = CpkSeries.bullets.push(new am4charts.Bullet());
						var CpkRectangle = CpkBullet.createChild(am4core.Rectangle);
						CpkBullet.horizontalCenter = "middle";
						CpkBullet.verticalCenter = "middle";
						CpkBullet.width = 7;
						CpkBullet.height = 7;
						CpkRectangle.width = 7;
						CpkRectangle.height = 7;
						var CpkState = CpkBullet.states.create("hover");
						CpkState.properties.scale = 1.2;
						var FailRateSeries = CPKLineChart.series.push(new am4charts.LineSeries());
						FailRateSeries.dataFields.valueY = "FailRate";
						FailRateSeries.dataFields.dateX = "Date";
						FailRateSeries.yAxis = FailRateAxis;
						FailRateSeries.name = "FailRate";
						FailRateSeries.strokeWidth = 2;
						FailRateSeries.propertyFields.strokeDasharray = "dashLength";
						FailRateSeries.tooltipText = "FailRate: {valueY} (%)";
						FailRateAxis.renderer.labels.template.fill = FailRateSeries.stroke;
						var FailRateBullet = FailRateSeries.bullets.push(new am4charts.CircleBullet());
						FailRateBullet.circle.fill = am4core.color("#fff");
						FailRateBullet.circle.strokeWidth = 2;
						FailRateBullet.circle.propertyFields.radius = "townSize";
						var FailRateState = FailRateBullet.states.create("hover");
						FailRateState.properties.scale = 1.2;
						// Add legend
						CPKLineChart.legend = new am4charts.Legend();
						// Add cursor
						CPKLineChart.cursor = new am4charts.XYCursor();
						CPKLineChart.cursor.fullWidthLineX = true;
						CPKLineChart.cursor.xAxis = dateAxis;
						CPKLineChart.cursor.lineX.strokeOpacity = 0;
						CPKLineChart.cursor.lineX.fill = am4core.color("#000");
						CPKLineChart.cursor.lineX.fillOpacity = 0.1;
					},
					error: function (data) {
						alert('Error.');
					}
				});
			}
	function getCpkTbl(ItemDescription, DataRange, TestCount, FailCount, Spec, FailRate, Cpk) {
				var CPKColor = '';
				if (parseFloat(Cpk) < 1.0) {
					CPKColor = '#ff0000';
				}
				else if (parseFloat(Cpk) >= 1.0 && parseFloat(Cpk) < 1.33) {
					CPKColor = '#bb3d00';
				}
				else (parseFloat(Cpk) >= 1.33)
				{
					CPKColor = '#00ec00';
				}
				var FailRateColor = '';
				var rate = parseFloat(FailCount) / parseFloat(TestCount)
				if (rate > 1.0) {
					FailRateColor = '#ff0000';
				}
				else if (rate < 1.0) {
					FailRateColor = '#8EE5EE';
				}

				var th = '<tr><th>ItemName</th><th>' + ItemDescription + '</th></tr>'
				var tbody =
					'<tr><td>Data Range</td><td>' + DataRange + '</td></tr>' +
					'<tr><td>Total Count</td><td>' + TestCount + '</td></tr>' +
					'<tr><td>Fail Count</td><td>' + FailCount + '</td></tr>' +
					'<tr><td>Spec.</td><td>' + Spec + '</td></tr>' +
					'<tr bgcolor="' + FailRateColor + '"><td>Fail Rate</td><td>' + Math.round(rate * 1000.0)/ 10 + '%</td></tr>' +
					'<tr bgcolor="' + CPKColor + '"><td>Cpk</td><td>' + Cpk + '</td>' +
					'</tr >';
				$('#ItemCPKTbl').html(th + tbody);
			}
    </script>
</div>

<script>
                   Date.prototype.Format = function (format) {
                    var date = {
                        "M+": this.getMonth() + 1,
                        "d+": this.getDate(),
                        "h+": this.getHours(),
                        "m+": this.getMinutes(),
                        "s+": this.getSeconds(),
                        "q+": Math.floor((this.getMonth() + 3) / 3),
                        "S": this.getMilliseconds()
                    };
                    if (/(y+)/i.test(format)) {
                        format = format.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
                    }
                    for (var k in date) {
                        if (new RegExp("(" + k + ")").test(format)) {
                            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? date[k] : ("00" + date[k]).substr(("" + date[k]).length));
                        }
                    }
                    return format;
                };
                var chart = am4core.create("chartdiv", am4charts.XYChart);
                var data = [];
                chart.data =@(new HtmlString(ViewBag.DailyFYRList));
                chart.colors.step = 2;
                // Create axes
                var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                dateAxis.renderer.minGridDistance = 50;
                // Create series
                function createAxisAndSeries(field, name, opposite, bullet,visible) {
                  var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                  var series = chart.series.push(new am4charts.LineSeries());
                  series.dataFields.valueY = field;
                  series.dataFields.dateX = "Date";
                  series.strokeWidth = 2;
                  series.yAxis = valueAxis;
                  series.name = name;
                  series.tooltipText = "{name}: [bold]{valueY}[/]";
                  series.tensionX = 0.9;
                  series.visible = visible;
                  var interfaceColors = new am4core.InterfaceColorSet();

                    if (field != "FYR") {
                        switch (bullet) {
                            case "triangle":
                                var bullet = series.bullets.push(new am4charts.Bullet());
                                bullet.width = 12;
                                bullet.height = 12;
                                bullet.horizontalCenter = "middle";
                                bullet.verticalCenter = "middle";

                                var triangle = bullet.createChild(am4core.Triangle);
                                triangle.stroke = interfaceColors.getFor("background");
                                triangle.strokeWidth = 2;
                                triangle.direction = "top";
                                triangle.width = 12;
                                triangle.height = 12;
                                triangle.visible = visible
                                break;

                            case "rectangle":
                                var bullet = series.bullets.push(new am4charts.Bullet());
                                bullet.width = 10;
                                bullet.height = 10;
                                bullet.horizontalCenter = "middle";
                                bullet.verticalCenter = "middle";
                                var rectangle = bullet.createChild(am4core.Rectangle);
                                rectangle.stroke = interfaceColors.getFor("background");
                                rectangle.strokeWidth = 2;
                                rectangle.width = 10;
                                rectangle.height = 10;
                                rectangle.visible = visible;
                                break;
                            default:
                                var bullet = series.bullets.push(new am4charts.CircleBullet());
                                bullet.circle.stroke = interfaceColors.getFor("background");
                                bullet.circle.strokeWidth = 2;
                                break;
                        }
                    } else {
                        var bullet = series.bullets.push(new am4charts.Bullet());
                       bullet.events.on("hit", function (ev) {
                     var item = ev.target.dataItem.component.tooltipDataItem.dataContext;
                     GetItemNameTypeIssue(item.ItemNameType,item.Date)
                 },this);
                var image = bullet.createChild(am4core.Image);
                image.width = 30;
                image.height = 30;
                image.horizontalCenter = "middle";
                image.verticalCenter = "middle";
                image.propertyFields.href = "href";
                image.adapter.add("mask", function (mask, target) {
                    var circleBullet = target.parent;
                    return circleBullet.circle;
                })
                    }
                  valueAxis.renderer.line.strokeOpacity = 1;
                  valueAxis.renderer.line.strokeWidth = 2;
                  valueAxis.renderer.line.stroke = series.stroke;
                  valueAxis.renderer.labels.template.fill = series.stroke;
                  valueAxis.renderer.opposite = opposite;
                  valueAxis.renderer.grid.template.disabled = true;
                }
                createAxisAndSeries("EstimateUPH", "EstimateUPH", true, "triangle",true);
                createAxisAndSeries("FYR", "FYR", true, "circle",true);
                createAxisAndSeries("Spare", "Spare", true, "rectangle",false);
                var valueAxis_Total = chart.yAxes.push(new am4charts.ValueAxis());
                valueAxis_Total.renderer.grid.template.location = 0;
                var Histt_series = chart.series.push(new am4charts.ColumnSeries());
                Histt_series.dataFields.valueY = "Total";
                Histt_series.dataFields.dateX = "Date";
                Histt_series.xAxis = dateAxis;
                Histt_series.yAxis = valueAxis_Total;
                Histt_series.tooltipText = "Total: [bold]{valueY}[/]";
                Histt_series.name="Total";
                Histt_series.columns.template.fillOpacity = 0.5;
                Histt_series.columns.template.strokeOpacity = 0;
                Histt_series.columns.template.fill = am4core.color("#ff9d6f");
                function DailyInfo(ev) {
                    var targetDate = new Date(ev.target._dataItem.dates.dateX)
                    try {

                        $.ajax({
                            type: 'POST',
                            url: "@Url.Action("GetDailyInfo", "AnalyzeTool")",
                            data: JSON.stringify({ ItemNameType:  @TempData["ItemNameType"], Date: targetDate.Format("yyyy-MM-dd"),Org:'@TempData["Org"]',Source:'@TempData["Source"]' }),
                            contentType: 'application/json',
                            success: function (data) {
                                   $('#DailyModel_id').empty();
                                for (var i = 0; i < data.length; i++) {

                                    addElementDiv("DailyModel_id", i)
                                    //工單
                                    $('#job_' + i).text(data[i].JobNumber+"("+data[i].Total+")").css({ 'font-size': 20 });
                                    //Spare
                                     $('#spare_' + i).text(data[i].Spare).css({ 'font-size': 20 });
                                    //FailItem

                                     $('#FailItem_' + i).FancyGrid({
                                      width: 'fit',
                                        height:  'fit',
                                         data: data[i]._FailItemList,
                                         paging: {
                                            pageSize: 5,
                                            pageSizeData: [5,10,20,50,500,1000]
                                          },
                                        columns: [{
                                          index: 'ItemName',
                                          title: 'ItemName',
                                          type: 'string',
                                          width: 300
                                        },{
                                          index: 'FailCount',
                                          title: 'FailCount',
                                          type: 'string',
                                           align: 'center',
                                           cellAlign: 'center',
                                          width: 100
                                        },{
                                          index: 'Rate',
                                          title: 'Rate(%)',
                                          type: 'string',
                                           align: 'center',
                                           cellAlign: 'center',
                                          width: 100
                                        }]
                                    });
                                    //FYR
                                    var color=['#8fc28f','#035203']
                                    if (data[i].FYR < 90) {
                                       color=['#c98a81','#de1e04']
                                    }
                                     Circles.create({
                                            id: 'FYR_' + i,
                                            radius: 60,
                                            value: data[i].FYR,
                                            maxValue: 100,
                                            width: 10,
                                            text: function (value) { return value + '%'; },
                                            colors: color,
                                            duration: 400,
                                            wrpClass: 'circles-wrp',
                                            textClass: 'circles-text',
                                            valueStrokeClass: 'circles-valueStroke',
                                            maxValueStrokeClass: 'circles-maxValueStroke',
                                            styleWrapper: true,
                                            styleText: true
                                        });

                                }
                           $('#DailyModal').modal('show');
                            }
                        });
                    } catch (ex) {

                    }

                 }
                Histt_series.columns.template.events.on("hit", DailyInfo, this);
                // Add legend
                chart.legend = new am4charts.Legend();
                // Add cursor
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.fullWidthLineX = true;
	chart.cursor.xAxis = dateAxis;
	chart.cursor.lineX.strokeOpacity = 0;
	chart.cursor.lineX.fill = am4core.color("#000");
	chart.cursor.lineX.fillOpacity = 0.1;

    function GetItemNameTypeIssue(ItemNametype, Date) {

        $.ajax({
            type: 'POST',
            url: "@Url.Action("GetIssueByItemNameType", "AnalyzeTool")",
            data: JSON.stringify({ ItemNameType: ItemNametype, date: Date }),
            contentType: 'application/json',
            success: function (data) {
                $('#IssuesModal').modal('show');
                $('#IssueContent').empty();
                $('#IssueReply').empty();
                $('#IssueContent').FancyGrid({
                  width: 'fit',
                    height:  'fit',
                    data: data.Issues,
                    columns: [{
                      index: 'Title',
                      title: 'Title',
                      type: 'string',
                      width: 500
                    },{
                      index: 'CreateDate',
                      title: 'CreateDate',
                      type: 'string',
                      width: 150
                    }]
                });
                var ContentStr = "";
                for (var i = 0; i < data.Contents.length; i++) {
                  ContentStr+=  '<tr>'+
                      '<td style="text-align: center">' +
                      '<img src="http://10.128.0.10/engineers/images/' + data.Contents[i].UserName + '.jpg" height="60" width="60" /></td>' +
                      '<td>'+ data.Contents[i].ActionCommon+'</td>'+
                      '<td style="vertical-align: middle">'+ data.Contents[i].fileName+'</td>'+
                      '<td>'+ data.Contents[i].CreateTime+'</td>'+
                    '</tr>'
                }
                $('#IssueReply').append(ContentStr);

            }
        });
        }
    function addElementDiv(obj,id) {
　　　　var parent = $('#'+obj)
        //新增 div

        parent.append('<div class="row" style="border-bottom-style: dotted;">'+
       '<div class="col-md-2"><div id="job_' + id + '"></div></div>' +
            '<div class="col-md-1"><div id="spare_' + id + '"></div></div>' +
            '<div class="col-md-6"><div id="FailItem_' + id + '"></div></div>' +
            '<div class="col-md-3 vertical"><div class="circle" id="FYR_' + id + '"></div></div></div>');

　　}
</script>